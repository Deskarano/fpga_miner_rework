CONSTANT    ip_miner_data,      00000000'b
CONSTANT    ip_miner_status,    00000001'b
CONSTANT    ip_bram_parity,     00000011'b
CONSTANT    ip_buf_byte0,       00000100'b
CONSTANT	ip_buf_byte1,	    00000101'b
CONSTANT    ip_buf_byte2,       00000110'b
CONSTANT    ip_buf_byte3,       00000111'b

CONSTANT    op_self_data,       00000000'b
CONSTANT    op_self_status,     00000001'b
CONSTANT    op_bram_addr,       00000010'b
CONSTANT    op_bufsel_parity,   00000011'b
CONSTANT    op_buf_byte0,       00000100'b
CONSTANT    op_buf_byte1,       00000101'b
CONSTANT    op_buf_byte2,       00000110'b
CONSTANT    op_buf_byte3,       00000111'b

CONSTANT    cmd_request_sync,   10000000'b
CONSTANT    cmd_send_done,      01000000'b
CONSTANT    cmd_bram_we,        00100000'b
CONSTANT    cmd_reset_all,      00010000'b
CONSTANT    cmd_msa_valid,      00001000'b
CONSTANT    cmd_hash_rc_valid,  00000100'b
CONSTANT    cmd_hash_msa_valid, 00000010'b
CONSTANT    cmd_hash_ready,     00000001'b

CONSTANT    buf_bram,           00000000'b
CONSTANT    buf_msa,            00010000'b
CONSTANT    buf_hash_a,         00100000'b
CONSTANT    buf_hash_b,         00110000'b
CONSTANT    buf_hash_c,         01000000'b
CONSTANT    buf_hash_d,         01010000'b
CONSTANT    buf_hash_e,         01100000'b
CONSTANT    buf_hash_f,         01110000'b
CONSTANT    buf_hash_g,         10000000'b
CONSTANT    buf_hash_h,         10010000'b
CONSTANT    buf_r_to_w,         10100000'b

CONSTANT    baseaddr_rc,        00000000'b
CONSTANT    baseaddr_msa,       01000000'b
CONSTANT    baseaddr_free,      10000000'b

; register mapping
; s0 - IPC data
; s1 - IPC status
; s2 - 32bit number byte0
; s3 - 32bit number byte1
; s4 - 32bit number byte2
; s5 - 32bit number byte3
; s6
; s7
; s8
; s9
; sA
; sB
; sC - RC address
; sD - MSA addres
; sE - misc iterator
; sF - SPM pointer

main:
    LOAD    sC,     baseaddr_rc
    LOAD    sD,     baseaddr_msa
    LOAD    sF,     00
    CALL    recv_ipc_data

    OUTPUTK buf_bram, op_bufsel_parity
    SUB     sF,     01
    LOAD    sE,     sF

    ; write received data into memory
    .bram_write_loop:
    FETCH   s5,     (sE)
    SUB     sE,     01
    FETCH   s4,     (sE)
    SUB     sE,     01
    FETCH   s3,     (sE)
    SUB     sE,     01
    FETCH   s2,     (sE)

    OUTPUT  s2,     op_buf_byte0
    OUTPUT  s3,     op_buf_byte1
    OUTPUT  s4,     op_buf_byte2
    OUTPUT  s5,     op_buf_byte3

    OUTPUT  sD,     op_bram_addr
    OUTPUTK cmd_bram_we, op_self_status
    OUTPUTK cmd_reset_all, op_self_status

    ADD     sD,     01
    SUB     sE,     01                  ; use the underflow to jump
    JUMP    NC,     .bram_write_loop

    .msa_extend_loop:
    LOAD    sE,     sD

    SUB     sE,     0F
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    ADD     sE,     0D
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    SUB     sE,     0E
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    ADD     sE,     09
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    ; semi hacky but pretty cool
    OUTPUTK buf_msa, op_bufsel_parity
    OUTPUTK buf_r_to_w, op_bufsel_parity
    OUTPUTK buf_bram, op_bufsel_parity

    OUTPUT  sD,     op_bram_addr
    OUTPUTK cmd_bram_we, op_self_status
    OUTPUTK cmd_reset_all, op_self_status

    ADD     sD,     01
    COMPARE sD,     baseaddr_free
    JUMP    NZ,     .msa_extend_loop

    LOAD    sC,     baseaddr_rc
    LOAD    sD,     baseaddr_msa

    .hash_loop:
    OUTPUT  sC,     op_bram_addr
    OUTPUTK cmd_hash_rc_valid, op_self_status
    OUTPUT  sD,     op_bram_addr
    OUTPUTK cmd_hash_msa_valid, op_self_status
    OUTPUTK cmd_hash_ready, op_self_status;

    ADD     sC,     01
    ADD     sD,     01
    COMPARE sD,     baseaddr_free
    JUMP    NZ,     .hash_loop

    CALL    fetch_hash_data
    CALL    send_ipc_data
    JUMP    main

fetch_hash_data:
    LOAD    sE,     buf_hash_h
    LOAD    sF,     00

    .loop:
    OUTPUT  sE,     op_bufsel_parity
    INPUT   s2,     ip_buf_byte0
    INPUT   s3,     ip_buf_byte1
    INPUT   s4,     ip_buf_byte2
    INPUT   s5,     ip_buf_byte3

    STORE   s2,     (sF)
    ADD     sF,     01
    STORE   s3,     (sF)
    ADD     sF,     01
    STORE   s4,     (sF)
    ADD     sF,     01
    STORE   s5,     (sF)
    ADD     sF,     01

    SUB     sE,     00010000'b
    COMPARE sE,     buf_msa
    JUMP    NZ,     .loop

    RETURN

send_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status

    .loop:
    ADD     s0,     00
    SUB     sF,     01
    FETCH   s0,     (sF)
    OUTPUT  s0,     op_self_data
    COMPARE sF,     00
    JUMP    NZ,     .loop

    OUTPUTK cmd_send_done, op_self_status
    OUTPUTK 00,     op_self_status
    RETURN

recv_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00

    .loop:
    INPUT   s0,     ip_miner_data
    STORE   s0,     (sF)
    ADD     sF,     01
    INPUT   s1,     ip_miner_status
    AND     s1,     cmd_send_done
    JUMP    Z,      .loop
    RETURN
