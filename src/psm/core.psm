CONSTANT    ip_miner_data,      00000000'b
CONSTANT    ip_miner_status,    00000001'b
CONSTANT    ip_bram_parity,     00000011'b
CONSTANT    ip_bram_byte0,      00000100'b
CONSTANT	ip_bram_byte1,	    00000101'b
CONSTANT    ip_bram_byte2,      00000110'b
CONSTANT    ip_bram_byte3,      00000111'b

CONSTANT    op_self_data,       00000000'b
CONSTANT    op_self_status,     00000001'b
CONSTANT    op_bram_addr,       00000010'b
CONSTANT    op_bram_parity,     00000011'b
CONSTANT    op_bram_data_byte0, 00000100'b
CONSTANT    op_bram_data_byte1, 00000101'b
CONSTANT    op_bram_data_byte2, 00000110'b
CONSTANT    op_bram_data_byte3, 00000111'b

CONSTANT    cmd_request_sync,   10000000'b
CONSTANT    cmd_send_done,      01000000'b
CONSTANT    cmd_bram_we,        00100000'b
CONSTANT    cmd_reset_all,      00010000'b
CONSTANT    cmd_msa_valid,      00001000'b
CONSTANT    cmd_msa_save_buf,   00000100'b

CONSTANT    baseaddr_rc,        00000000'b
CONSTANT    baseaddr_msa,       01000000'b
CONSTANT    baseaddr_free,      10000000'b

; register mapping
; s0 - IPC data
; s1 - IPC status
; sC - RC address
; sD - MSA addres
; sE - misc iterator
; sF - SPM pointer

main:
    LOAD    sC,     baseaddr_rc
    LOAD    sD,     baseaddr_msa
    LOAD    sF,     00
    CALL    recv_ipc_data

    SUB     sF,     01
    LOAD    sE,     sF

    ; write received data into memory
    .bram_write_loop:
    FETCH   s0,     (sE)
    OUTPUT  s0,     op_bram_data_byte3
    SUB     sE,     01

    FETCH   s0,     (sE)
    OUTPUT  s0,     op_bram_data_byte2
    SUB     sE,     01

    FETCH   s0,     (sE)
    OUTPUT  s0,     op_bram_data_byte1
    SUB     sE,     01

    FETCH   s0,     (sE)
    OUTPUT  s0,     op_bram_data_byte0

    OUTPUT  sD,     op_bram_addr
    ADD     sD,     01

    OUTPUTK cmd_bram_we, op_self_status
    OUTPUTK cmd_reset_all, op_self_status

    SUB     sE,     01                  ; use the underflow to jump
    JUMP    NC,     .bram_write_loop

    .msa_extend_loop:
    LOAD    sE,     sD

    SUB     sE,     0F
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    ADD     sE,     0D
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    SUB     sE,     0E
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    ADD     sE,     09
    OUTPUT  sE,     op_bram_addr
    OUTPUTK cmd_msa_valid, op_self_status

    OUTPUT  sD,     op_bram_addr
    OUTPUTK cmd_msa_save_buf, op_self_status
    OUTPUTK cmd_bram_we, op_self_status
    OUTPUTK cmd_reset_all, op_self_status

    ADD     sD,     01
    COMPARE sD,     baseaddr_free
    JUMP    NZ,     .msa_extend_loop

    JUMP    main

send_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status

send_ipc_data_loop:
    ADD     s0,     00
    SUB     sF,     01
    FETCH   s0,     (sF)
    OUTPUT  s0,     op_self_data
    COMPARE sF,     00
    JUMP    NZ,     send_ipc_data_loop

    OUTPUTK cmd_send_done, op_self_status
    OUTPUTK 00,     op_self_status
    RETURN

recv_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00

recv_ipc_data_loop:
    INPUT   s0,     ip_miner_data
    STORE   s0,     (sF)
    ADD     sF,     01
    INPUT   s1,     ip_miner_status
    AND     s1,     cmd_send_done
    JUMP    Z,      recv_ipc_data_loop
    RETURN
