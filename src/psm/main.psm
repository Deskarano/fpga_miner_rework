CONSTANT    ip_uart_data,       00000000'b
CONSTANT    ip_uart_status,     00000001'b
CONSTANT    ip_worker_data,     00000010'b
CONSTANT    ip_worker_status,   00000011'b

CONSTANT    op_uart_data,       00000000'b
CONSTANT    op_worker_sel,      00000001'b
CONSTANT    op_self_data,       00000010'b
CONSTANT    op_self_status,     00000011'b

CONSTANT    tx_bufd_pres,       00100000'b
CONSTANT    tx_bufd_half,       00010000'b
CONSTANT    tx_bufd_full,       00001000'b
CONSTANT    rx_bufd_pres,       00000100'b
CONSTANT    rx_bufd_half,       00000010'b
CONSTANT    rx_bufd_full,       00000001'b

CONSTANT    cmd_request_sync,   10000000'b
CONSTANT    cmd_send_done,      01000000'b

; register mapping
; s0 - data (UART or IPC)
; s1 - status (UART or IPC)
; sF - SPM pointer

init:
    LOAD    sE,     00
    LOAD    sF,     00

recv_bytes:
    CALL    recv_uart_data
    STORE   s0,     (sF)
    ADD     sF,     01
    COMPARE sF,     40
    JUMP    C,      recv_bytes

process:
    OUTPUTK 00000001'b, op_worker_sel
    CALL    send_ipc_data
    CALL    recv_ipc_data

process_loop:
    FETCH   s0,     (sE)
    ADD     s0,     01
    STORE   s0,     (sE)

    ADD     sE,     01
    COMPARE sE,     sF
    JUMP    C,      process_loop

process_end:
    OUTPUTK 00000010'b, op_worker_sel
    CALL    send_ipc_data
    CALL    recv_ipc_data

    SUB     sF,     01
    LOAD    sE,     00

send_bytes:
    FETCH   s0,     (sE)
    CALL    send_uart_data
    ADD     sE,     01
    COMPARE sE,     sF
    JUMP    C,     send_bytes

    LOAD    sE,     00
    LOAD    sF,     00
    JUMP    recv_bytes

recv_uart_data:
    INPUT   s1,     ip_uart_status
    AND     s1,     rx_bufd_pres
    JUMP    Z,      recv_uart_data
    INPUT   s0,     ip_uart_data
    RETURN

send_uart_data:
    INPUT   s1,     ip_uart_status
    AND     s1,     tx_bufd_full
    JUMP    NZ,     send_uart_data
    OUTPUT  s0,     op_uart_data
    RETURN

send_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status

send_ipc_data_loop:
    ADD     s0,     00
    SUB     sF,     01
    FETCH   s0,     (sF)
    OUTPUT  s0,     op_self_data
    COMPARE sF,     00
    JUMP    NZ,     send_ipc_data_loop

    OUTPUTK cmd_send_done, op_self_status
    OUTPUTK 00,     op_self_status
    RETURN

recv_ipc_data:
    OUTPUTK cmd_request_sync, op_self_status
    ADD     s0,     00
    ADD     s0,     00
    OUTPUTK 00,     op_self_status
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00
    ADD     s0,     00

recv_ipc_data_loop:
    INPUT   s0,     ip_worker_data
    STORE   s0,     (sF)
    ADD     sF,     01
    INPUT   s1,     ip_worker_status
    AND     s1,     cmd_send_done
    JUMP    Z,      recv_ipc_data_loop
    RETURN
